// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?

  accounts         Account[]
  classrooms       Classroom[]       @relation("ClassroomOwner")
  classroomMembers ClassroomMember[]
  posts            Post[]
  comments         Comment[]
  submissions      Submission[]
  grades           Grade[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Classroom {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  code        String   @unique @default(cuid())
  ownerId     String
  createdAt   DateTime @default(now())
  image       String?
  description String?
  startDate   DateTime
  endDate     DateTime

  owner           User              @relation("ClassroomOwner", fields: [ownerId], references: [id])
  posts           Post[]
  members         ClassroomMember[]
  sections        Section[]
  timeSlots       TimeSlot[]        @relation("ClassroomTimeSlots")
}

model TimeSlot {
  id          String   @id @default(cuid())
  classroomId String
  day         String   // "Monday", "Tuesday", ...
  startTime   String   // "HH:MM"
  endTime     String   // "HH:MM"

  classroom   Classroom @relation("ClassroomTimeSlots", fields: [classroomId], references: [id], onDelete: Cascade)
}

model ClassroomMember {
  id          String   @id @default(cuid())
  classroomId String
  userId      String
  role        String   @db.VarChar(20) // 'student', 'teacher', 'co-teacher'
  joinedAt    DateTime @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  classroomId String
  userId      String
  sectionId   String?
  type        String    @db.VarChar(20) // 'announcement', 'material', 'assignment'
  title       String?   @db.VarChar(255)
  content     String?
  dueDate     DateTime?
  maxScore    Int?
  createdAt   DateTime  @default(now())

  classroom   Classroom    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  section     Section?     @relation(fields: [sectionId], references: [id])
  comments    Comment[]
  submissions Submission[]
  files       File[]
}

model Submission {
  id          String   @id @default(cuid())
  postId      String
  studentId   String?
  submittedAt DateTime @default(now())

  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  student User?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  files   File[]
  grade   Grade?
}

model Grade {
  id           String   @id @default(cuid())
  submissionId String   @unique
  studentId    String?
  score        Decimal  @db.Decimal(5, 2)
  gradedAt     DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  student    User?      @relation(fields: [studentId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model File {
  id           String  @id @default(cuid())
  postId       String?
  submissionId String?
  url          String  @db.Text // S3 bucket URL
  name         String  @default("Untitled")

  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Section {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  classroomId String
  createdAt   DateTime @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  posts     Post[]
}
