// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  password     String
  createdAt    DateTime @default(now())

  classrooms       Classroom[] @relation("ClassroomOwner")
  classroomMembers ClassroomMember[]
  posts           Post[]
  comments        Comment[]
  submissions     Submission[]
  teamMemberships TeamMember[]
  studentProgress StudentProgress[]
  grades          Grade[]
}

model Classroom {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  code        String    @unique @db.VarChar(10)
  ownerId     Int
  createdAt   DateTime  @default(now())

  owner        User         @relation("ClassroomOwner", fields: [ownerId], references: [id])
  posts        Post[]
  members      ClassroomMember[]
  studentProgress StudentProgress[]
}

model ClassroomMember {
  id          Int       @id @default(autoincrement())
  classroomId Int
  userId      Int
  role        String    @db.VarChar(20) // 'student', 'teacher', 'co-teacher'
  joinedAt    DateTime  @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model StudentProgress {
  id                  Int       @id @default(autoincrement())
  studentId           Int
  classroomId         Int
  assignmentsCompleted Int
  totalScore         Decimal   @db.Decimal(5,2)
  lastUpdated        DateTime  @updatedAt

  student    User      @relation(fields: [studentId], references: [id])
  classroom  Classroom @relation(fields: [classroomId], references: [id])
}

model Post {
  id           Int       @id @default(autoincrement())
  classroomId  Int
  userId       Int
  type         String    @db.VarChar(20) // 'announcement', 'material', 'assignment'
  title        String?   @db.VarChar(255)
  content      String?
  fileUrl      String?
  dueDate      DateTime?
  isTeamAssignment Boolean @default(false)
  createdAt    DateTime  @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id])
  author    User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  teams     Team[]
  submissions Submission[]
}

model Team {
  id           Int       @id @default(autoincrement())
  assignmentId Int
  name         String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())

  assignment Post @relation(fields: [assignmentId], references: [id])
  members    TeamMember[]
  submissions Submission[]
  grades     Grade[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  studentId Int
  joinedAt  DateTime @default(now())

  team    Team @relation(fields: [teamId], references: [id])
  student User @relation(fields: [studentId], references: [id])
}

model Submission {
  id        Int      @id @default(autoincrement())
  postId    Int
  studentId Int?     // Nullable for team submissions
  teamId    Int?     // Nullable for individual submissions
  fileUrl   String
  submittedAt DateTime @default(now())

  post    Post  @relation(fields: [postId], references: [id])
  student User? @relation(fields: [studentId], references: [id])
  team    Team? @relation(fields: [teamId], references: [id])
  grades  Grade[]
}

model Grade {
  id          Int      @id @default(autoincrement())
  submissionId Int
  studentId   Int?     // Nullable if team submission
  teamId      Int?     // Nullable if individual submission
  score       Decimal  @db.Decimal(5,2)
  feedback    String?
  gradedAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id])
  student    User?      @relation(fields: [studentId], references: [id])
  team       Team?      @relation(fields: [teamId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}